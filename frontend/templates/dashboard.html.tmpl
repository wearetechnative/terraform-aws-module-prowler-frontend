<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Prowler Dashboard Launcher</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      margin: 0;
      font-family: "Inter", Arial, sans-serif;
      background: linear-gradient(135deg, #e8ecf7, #f8faff);
      color: #333;
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100vh;
    }

    .card {
      background: white;
      border-radius: 16px;
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
      padding: 40px 50px;
      text-align: center;
      max-width: 400px;
      width: 90%;
      transition: transform 0.3s ease;
    }

    .card:hover {
      transform: translateY(-2px);
    }

    h1 {
      font-size: 1.8em;
      color: #2c3e50;
      margin-bottom: 20px;
      font-weight: 500;
    }

    .button {
      padding: 14px 26px;
      background-color: #395797;
      color: white;
      font-size: 1em;
      font-weight: 500;
      border: none;
      border-radius: 50px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .button:hover {
      background-color: #0c267b;
      transform: scale(1.03);
    }

    .button:disabled {
      background-color: #ccc;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }

    .status {
      margin-top: 30px;
      min-height: 60px;
    }

    .spinner {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #395797;
      border-radius: 50%;
      width: 24px;
      height: 24px;
      animation: spin 1s linear infinite;
      margin: 10px auto;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
  </style>
</head>
<body>
  <div class="card">
    <h1>Prowler Dashboard</h1>
    <p>Launch and access your interactive Prowler security dashboard.</p>

    <button id="launch-dashboard-button" onclick="handleLaunch()" class="button">Launch Dashboard</button>

    <div id="waiting-screen" class="status" style="display:none;">
      <div class="spinner"></div>
      <p id="status-text"></p>
    </div>
  </div>

  <script>
    const CLIENT_ID = "${client_id}";
    const USER_POOL_DOMAIN = "${user_pool_domain}";
    const REDIRECT_URI = window.location.origin + window.location.pathname;
    const APIBase = "${api_base}";
    // Force reload when navigating with back/forward button
window.addEventListener("pageshow", function (event) {
  if (event.persisted || performance.getEntriesByType("navigation")[0].type === "back_forward") {
    window.location.reload();
  }
});

// Handle Cognito redirect
(function handleRedirect() {
  const hash = window.location.hash;
  if (hash.includes('id_token')) {
    const params = new URLSearchParams(hash.substring(1));
    const idToken = params.get('id_token');
    if (idToken) {
      sessionStorage.setItem('idToken', idToken);
    }
    history.replaceState(null, '', window.location.pathname);
  }
})();

// Ensure user is authenticated
(function ensureAuthenticated() {
  const token = sessionStorage.getItem('idToken');
  if (!token) {
    const loginUrl = `https://${USER_POOL_DOMAIN}/login?client_id=${CLIENT_ID}&response_type=token&scope=openid&redirect_uri=${encodeURIComponent(REDIRECT_URI)}`;
    window.location.href = loginUrl;
  }
})();

// Resume polling if a dashboard instance is already launching
(function resumeIfDashboardLaunching() {
  const instanceId = sessionStorage.getItem('dashboardInstanceId');
  if (instanceId) {
    console.log("Resuming dashboard launch with instance ID:", instanceId);
    document.getElementById('launch-dashboard-button').disabled = true;
    updateStatus("Resuming dashboard launch...");
    pollDashboardStatus();
  }
})();

// Show status messages
function updateStatus(message, showSpinner = true) {
  document.getElementById('waiting-screen').style.display = 'block';
  document.getElementById('status-text').innerText = message;
  document.querySelector('.spinner').style.display = showSpinner ? 'inline-block' : 'none';
}

// Called when user clicks launch button
function handleLaunch() {
  document.getElementById('launch-dashboard-button').disabled = true;
  updateStatus("Checking dashboard...");

  fetch(`${APIBase}/check-dashboard-status`, {
    headers: {
      'Authorization': 'Bearer ' + sessionStorage.getItem('idToken')
    }
  })
  .then(res => {
    if (res.status === 409) {
      // Dashboard is already launching
      return res.json().then(data => {
        const instanceId = data.instanceId;
        if (instanceId) {
          sessionStorage.setItem('dashboardInstanceId', instanceId);
          updateStatus("Dashboard is already launching. Monitoring status...");
          pollDashboardStatus();
        } else {
          throw new Error("Instance is launching but no instance ID returned");
        }
      });
    }
    return res.json();
  })
  .then(data => {
    if (data.status === "ready" && data.dashboardIp) {
      updateStatus("Dashboard is ready. Redirecting...");
      window.location.replace("http://prowler.nbdbiblion.technative.cloud:11666");
    } else if (["not_found", "terminated", "stopped"].includes(data.status)) {
      updateStatus("Dashboard is not running. Starting it...");
      launchDashboard();
    } else if (data.status === "pending" || data.status === "initializing") {
      updateStatus("Dashboard is still starting. Monitoring...");
      sessionStorage.setItem('dashboardInstanceId', data.instanceId);
      pollDashboardStatus();
    }
  })
  .catch(err => {
    console.error("Status check failed:", err);
    updateStatus("Error checking dashboard. Trying to start it...");
    launchDashboard();
  });
}

// Launch new dashboard EC2 instance
function launchDashboard() {
  fetch(`${APIBase}/launch-dashboard`, {
    method: 'POST',
    headers: {
      'Authorization': 'Bearer ' + sessionStorage.getItem('idToken')
    }
  })
  .then(res => {
    if (res.status === 409) {
      return res.json().then(data => {
        const instanceId = data.instanceId;
        if (instanceId) {
          sessionStorage.setItem('dashboardInstanceId', instanceId);
          updateStatus("Dashboard already launching. Resuming monitoring...");
          pollDashboardStatus();
        } else {
          throw new Error("Conflict but no instance ID returned");
        }
      });
    }
    return res.json();
  })
  .then(data => {
    if (!data.instanceId) throw new Error("No instanceId returned.");
    sessionStorage.setItem('dashboardInstanceId', data.instanceId);
    pollDashboardStatus();
  })
  .catch(err => {
    console.error("Launch failed:", err);
    updateStatus("Failed to start dashboard.", false);
    document.getElementById('launch-dashboard-button').disabled = false;
  });
}

// Poll dashboard instance status until it's ready or failed
function pollDashboardStatus(attempts = 0) {
  const instanceId = sessionStorage.getItem('dashboardInstanceId');

  if (!instanceId || attempts >= 60) {
    updateStatus("Timeout waiting for dashboard.", false);
    sessionStorage.removeItem('dashboardInstanceId');
    document.getElementById('launch-dashboard-button').disabled = false;
    return;
  }

  fetch(`${APIBase}/check-dashboard-status?instanceId=${encodeURIComponent(instanceId)}`, {
    method: 'GET',
    headers: {
      'Authorization': 'Bearer ' + sessionStorage.getItem('idToken')
    }
  })
  .then(res => res.json())
  .then(data => {
    const currentStatus = data.status || "unknown";
    updateStatus(`Waiting for dashboard... (${currentStatus})`);
    console.log(`Dashboard status poll #${attempts + 1}:`, currentStatus);

    if (currentStatus === "ready" && data.dashboardIp) {
      updateStatus("Dashboard is ready. Redirecting...");
      setTimeout(() => {
        window.location.href = "http://prowler.nbdbiblion.technative.cloud:11666";
      }, 1000);
    } else if (["terminated", "not_found", "stopped"].includes(currentStatus)) {
      updateStatus("Dashboard is no longer available. Please launch again.", false);
      sessionStorage.removeItem('dashboardInstanceId');
      document.getElementById('launch-dashboard-button').disabled = false;
    } else {
      setTimeout(() => pollDashboardStatus(attempts + 1), 3000);
    }
  })
  .catch(err => {
    console.error("Polling error:", err);
    setTimeout(() => pollDashboardStatus(attempts + 1), 3000);
  });
}
  </script>
</body>
</html>