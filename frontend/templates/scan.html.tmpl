<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Prowler Security Scan</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      margin: 0;
      font-family: "Inter", Arial, sans-serif;
      background: linear-gradient(135deg, #e8ecf7, #f8faff);
      color: #333;
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100vh;
    }

    .card {
      background: white;
      border-radius: 16px;
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
      padding: 40px 50px;
      text-align: center;
      max-width: 400px;
      width: 90%;
      transition: transform 0.3s ease;
    }

    .card:hover {
      transform: translateY(-2px);
    }

    h1 {
      font-size: 1.8em;
      color: #2c3e50;
      margin-bottom: 20px;
      font-weight: 500;
    }

    .button {
      padding: 14px 26px;
      background-color: #395797;
      color: white;
      font-size: 1em;
      font-weight: 500;
      border: none;
      border-radius: 50px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .button:hover {
      background-color: #0c267b;
      transform: scale(1.03);
    }

    .button:disabled {
      background-color: #ccc;
      cursor: not-allowed;
      transform: none;
      box-shadow: none;
    }

    .status {
      margin-top: 30px;
      min-height: 60px;
    }

    .spinner {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #395797;
      border-radius: 50%;
      width: 24px;
      height: 24px;
      animation: spin 1s linear infinite;
      margin: 10px auto;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .result-message a {
      color: #395797;
      text-decoration: none;
      font-weight: 500;
    }

    .result-message a:hover {
      text-decoration: underline;
    }
  </style>
</head>
<body>
  <div class="card">
    <h1>Prowler Security Scan</h1>
    <p>Run a new AWS security scan and monitor progress in real time.</p>

    <button id="start-task-button" onclick="startTask()" class="button">Start Scan</button>

    <div id="waiting-screen" class="status" style="display:none;">
      <div class="spinner"></div>
      <p id="status-text"></p>
      <div class="result-message" id="result-message"></div>
    </div>
  </div>

  <script>
    const CLIENT_ID = "${client_id}";
    const USER_POOL_DOMAIN = "${user_pool_domain}";
    const REDIRECT_URI = window.location.origin + window.location.pathname;
    const APIBase = "${api_base}";
    // Handle Cognito redirect with id_token
        (function handleAuthRedirect() {
        const hash = window.location.hash;
        if (hash.includes("id_token")) {
            const params = new URLSearchParams(hash.substring(1));
            const idToken = params.get("id_token");
            if (idToken) {
            sessionStorage.setItem("idToken", idToken);
            }
            history.replaceState(null, "", window.location.pathname);
        }
        })();

        // Redirect to Cognito login if not authenticated
        (function ensureAuthenticated() {
        const token = sessionStorage.getItem("idToken");
        if (!token) {
            const loginUrl = `https://${USER_POOL_DOMAIN}/login?client_id=${CLIENT_ID}&response_type=token&scope=openid&redirect_uri=${encodeURIComponent(REDIRECT_URI)}`;
            window.location.href = loginUrl;
        }
        })();

        // Update waiting screen
        function updateStatus(message, showSpinner = true) {
        document.getElementById("waiting-screen").style.display = "block";
        document.getElementById("status-text").innerText = message;
        document.querySelector(".spinner").style.display = showSpinner ? "inline-block" : "none";
        }

        // Start ECS task via API
        function startTask() {
        const button = document.getElementById("start-task-button");
        button.disabled = true;
        updateStatus("Starting scan...");

        fetch(`${APIBase}/start-task`, {
            method: "POST",
            headers: {
            "Content-Type": "application/json",
            "Authorization": "Bearer " + sessionStorage.getItem("idToken")
            },
            body: JSON.stringify({})
        })
        .then(response => {
            if (response.status === 409) {
            // Properly parse the JSON body before accessing taskArns
            return response.json().then(data => {
                if (data.taskArns) {
                const arns = data.taskArns;
                sessionStorage.setItem("taskArns", JSON.stringify(arns));
                updateStatus("A scan is already running. Checking status...");
                pollTaskStatus(arns);
                // Return a resolved promise to skip the next then()
                return Promise.resolve();
                } else {
                throw new Error("A scan is already running, but task status could not be retrieved.");
                }
            });
            }

            if (!response.ok) {
            throw new Error("Unauthorized or error starting task");
            }

            return response.json();
        })
        .then(data => {
            // This block is skipped if previous then() returned Promise.resolve()
            if (data) {
            if (!data.taskArns || data.taskArns.length === 0) {
                throw new Error("No taskArns returned.");
            }
            sessionStorage.setItem("taskArns", JSON.stringify(data.taskArns));
            updateStatus("Scan in progress...");
            pollTaskStatus(data.taskArns);
            }
        })
        .catch(error => {
            console.error("Error starting task:", error);
            alert("Failed to start the task.");
            updateStatus("Error: " + error.message, false);
            button.disabled = false;
        });
        }

        // Poll ECS task status every 5 seconds
        function pollTaskStatus(taskArns) {
        const encodedArns = encodeURIComponent(JSON.stringify(taskArns));
        const intervalId = setInterval(() => {
            fetch(`${APIBase}/check-task-status?taskArn=${encodedArns}`, {
            headers: {
                "Authorization": "Bearer " + sessionStorage.getItem("idToken")
            }
            })
            .then(res => {
            if (!res.ok) throw new Error("Polling failed");
            return res.json();
            })
            .then(data => {
            const status = data.status || "unknown";
            console.log("Polling status:", data);
            updateStatus(`Scan status: ${status}...`);

            if (status === "STOPPED") {
                clearInterval(intervalId);
                sessionStorage.removeItem("taskArns");
                updateStatus("Scan complete", false);
                document.getElementById("start-task-button").disabled = false;

                const result = document.getElementById("result-message");
                result.innerHTML = `
                <p>Scan is completed! You can now view the results by launching the Prowler dashboard.</p>
                <a href="/Prowler/prowler_dashboard/" style="text-decoration: underline; color: #32cd32;">
                    Go to Launch Dashboard Page
                </a>
                `;
            }
            })
            .catch(err => {
            console.error("Polling error:", err);
            updateStatus("Error checking scan status...", false);
            });
        }, 5000);
        }

        // Resume polling if taskArns are in sessionStorage
        (function resumePollingIfNeeded() {
        const stored = sessionStorage.getItem("taskArns");
        if (stored) {
            try {
            const taskArns = JSON.parse(stored);
            if (Array.isArray(taskArns) && taskArns.length > 0) {
                updateStatus("Resuming scan status polling...");
                document.getElementById("start-task-button").disabled = true;
                pollTaskStatus(taskArns);
            }
            } catch (err) {
            console.error("Error resuming scan:", err);
            sessionStorage.removeItem("taskArns");
            }
        }
        })();
  </script>
</body>
</html>